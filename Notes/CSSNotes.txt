

Create divs to sepereate "blocks" of content from one another

Create Classes to apply changes to entire groups of content
 - Utilize margin left & right auto to center content
  + must have a width attribute, and display block as well to create centering
 - Utilize padding to create space between div "block" and content within div
 - Utilize border and border radius to create border around content

Try not to use pure black and white on pages, creates unpleasing look, instead use hex values that are ligther/darker

Utilize the Box Model:Organize placement of content around these elements:
- Margin: Seperating edges of div from page/ one another
- Border: Essentially space div takes up
- Padding: Area around content
- Content 

Use line-height instead of height

Can also Center content using text-align:center; in main div of webpage
- This method is used to center content within the div of main "block"
 + tell contianer all inline elements should align to the center

Can Also center content using a flex-box = (display: flex;)
 - Flexbox always consinst of a contianer and its children
  + must wrap content around div tag and children classe below will have atrribute applied
 - To use create a css element for your div, then state
 {
    display: flex;
    justify-content: center;
 }
  + This will place everything in line and center it as well
 - To seperate items within same inline of flexbox either add margin to left & right of item or chagne value 
 of justify content to space-around to evenly distribute space around items

Browsers will automatically format some aspects of the css with a built in style stylesheet
 -If you do not specify attributes some will automatically be given

 For HTML filepaths 
- use ../ to go one level up
- use / to go to the root folder
- use filename.type if the file is located in the current folder
- use filefolder/filename.type if the file is located in the filefolder in the current folder

Flexbox takes everychild of a parent div and turns it into a column
 - However, it only effects direct children, so "grandchildren" will not be effected
 - So if you want to seperate the application of flexbox attributes, create divs for elements you 
 want to be affected

A utility class is a class that only sets a single css property
 - give the html attribute the class name of the utility class, then
 in the css file create an attribute with name of utility, and provide it with
 one attribute
 - Allows you to apply the attribute of that class to any html tag, without having to edit each 
  individuals tags class

You can have more than one class for an html element
- To do so put a space between each class name for the html element

Justify Spacing is as follows
- space-around = space before, between, and after items
- space-evenly = items will have equal space around them
- space-between = itesm will ahve space between them

Flexbox Containers by defualt are display block

The power of inheritance is the ability to write DRYer code
 - Certain properties can be inhreted by children of the body tag, 
  this can prevent reptition of things such as text-align center
 - Only certain properties can be inherted
 - Feels similar to utility classes

Web Safe fonts can remove the necessity of server sending font information to client

Can shorthand margin attribute by doing
- margin: (top) (right) (bottom) (left); 
 + Order is clockwise
- Can further shorthand in the form of margin: (top and bottom) (right and left)
 + useful if top and bottom have same values and right and left have same values 

 Background Images are not in the html tags they are in the css file
  -Specify Background image using 
   +background-image: url("image filepath");
  - To scale background to size of browser use 
   + background-size: cover;

Utilize google fonts to find fonts
- Provides code to place in head of html and css file 

Buttons do NOT inheret font families
 - can achive inheritance by using 
  + font-family: inherit;

Can use local fonts in the project by placing ttf file into working directory
 - With font file in directory add 
   + @font-face { src: url("font file path"); font-family: font_name;}
 - Then to use, in css file in body of whatever taret html tag is, use attribute
   + font-fmaily; font_name;

<Span> tag allows you to select indivudal text within a tag (nesting) so that you can 
apply styling to that specfic element
 - span is inline, divs are block based
 - Can give spann a class, then target that class in css file
 - Since span is like div, can use tags liek border-bottom, etc.

id specifier is very similar to class specifier 
 - html syntax is the same but differ in purpose and css syntax
 - in css file use #id_name instead of .id_name
 - use id if element is unique and styling will only apply to that element

 Can achive shadows on text using 
  - text-shadow: (+/-)distance(right/left) (+/-)distance(below/above)  blur color
   + sytnax text-shadow: 5px 2px 1px black;
 - Can achive glow effect using shadows by setting firt 2 parametrs to zero and positive blur value
  + text-shadow: 0px 0px 5px black;
  Can make an image round by setting border-radius to 50%
   + border-radius: 50%;
  Can group multiple elements by comma seperating them in css file
   - will apply css styling to all elements

  Another centering teqchnique is to use 
  {
   - display: flex;
   - flex-directiion: column;
   - align-items: center;
  }
  - This means create flexbox which places everyting in same row, but then chagne direction to column to make 
    everythign same column, then finally align them to be centered.
    + Applying this to body tag centers every child of body

 Centering:
 {
  display: flex;
  justify-content: center;
 }
 - This method places all items into a row then chooses placement across row based of justify-content attribute
    +has control over horizontal line(MAIN AXIS)
 {
    display: flex;
    flex-direction: column;
    align-items: center;
 }
 - This method changes direction from main axis (row) placement, to cross axis(col) placement
   +flex-direction by default is a row, must set to column to create col structure
 {
    display: flex;
    justify-content: end; (start, center, end, space-around, space-evenly, space-between)
    align-items: center;  (start, center, end)
 }
 - Using a combination of both you can change placement of object around webpage
  +can change vertical and horizontal placment using align-items and justify-content respectively
   + align-items has default value stretch(will take up entire column)

Basically you have two axis, justify-content controls x axis, align-items controls y axis
 -BUT if you use flex-direction and change the value to column, then the axis direction changes
  + defualt flex direction (row): justify-content(main axis,X axis) \
                                  align-items(cross axis, Y axis)    \ (NOTICE X AND Y (DIRECTIONS) FLIPPED)
  + flex-direction: column: justify-content(main axis, Y axis)       / 
                            align-items(cross axis,X axis)          /

Text-align will only center in-line elements inside of ints contianer
 - <div> tags are display block, so text-align: center; will not apply

(tag,id,class):hover can be used to style based on if element is being hovered over
